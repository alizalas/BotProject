import logging
from telegram.ext import Application, MessageHandler, filters, CommandHandler, CallbackQueryHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup
from config import BOT_TOKEN
from functions import format_item_message
from . import add
from . import search
from .data import db_session

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)


reply_keyboard = [['/add', '/catalog'],
                  ['/search', '/help'],
                  ['/export', '/import']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)


async def start(update, context):
    await update.message.reply_text(
        """
        üìöüé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ç–æ—Ä –∫–Ω–∏–≥ –∏ —Ñ–∏–ª—å–º–æ–≤!
        
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /add - –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É –∏–ª–∏ —Ñ–∏–ª—å–º
        /list - –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥
        /catalog - –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
        /export - —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV
        /import - –∏–º–ø–æ—Ä—Ç –∏–∑ CSV
        /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        """,
        reply_markup=markup
    )
    # user = User(telegram_id=update.effective_user.id, name=,lastnametitle="–ü–µ—Ä–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å", content="–ü—Ä–∏–≤–µ—Ç –±–ª–æ–≥!",
    #             user_id=1, is_private=False)
    # db_sess.add(news)


async def help(update, context):
    await update.message.reply_text(
        """
        ‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:
        
        <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ</b>
        /add - –Ω–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        (–ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º)
        
        <b>–ü—Ä–æ—Å–º–æ—Ç—Ä</b>
        /catalog - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –∫–Ω–∏–≥ –∏ —Ñ–∏–ª—å–º–æ–≤
        /search - –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
        
        <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b>
        /export - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –≤ CSV
        /import - –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ CSV (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)
        """,
        parse_mode='HTML')


async def catalog(update, context):
    session = db_session.create_session()
    books = session.query(Book).filter(Book.user_id == update.effective_user.id)
    films = session.query(Film).filter(Film.user_id == update.effective_user.id)

    if not books:
        await update.message.reply_text("üòî –í–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥ –ø—É—Å—Ç.")

    for item in books:
        message = format_item_message(item, "book")
        if item.cover and os.path.exists(item.cover):
            await update.message.reply_photo(
                photo=open(item.cover, 'rb'),
                caption=message
            )
        else:
            await update.message.reply_text(message)

    if not films:
        await update.message.reply_text("üòî –í–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç.")

    for item in books:
        message = format_item_message(item, "film")
        if item.cover and os.path.exists(item.cover):
            await update.message.reply_photo(
                photo=open(item.cover, 'rb'),
                caption=message
            )
        else:
            await update.message.reply_text(message)


def main():
    db_session.global_init("db/films_books.db")
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    application.add_handler(CommandHandler("catalog", catalog))

    application.add_handler(CommandHandler("help", help))

    add_conversation = ConversationHandler(
        entry_points=[CommandHandler('add', add.first_step)],
        states={
            add.TYPE: [CallbackQueryHandler(add.second_step)],
            add.BOOK_TITLE: [MessageHandler(filters.TEXT, add.third_step_books)],
            add.BOOK_AUTHOR: [MessageHandler(filters.TEXT, add.fourth_step_books)],
            add.BOOK_YEAR: [MessageHandler(filters.TEXT, add.fifth_step_books)],
            add.BOOK_GENRE: [MessageHandler(filters.TEXT, add.sixth_step_books)],
            add.BOOK_LINK: [MessageHandler(filters.TEXT, add.seventh_step_books)],
            add.FILM_TITLE: [MessageHandler(filters.TEXT, add.third_step_films)],
            add.FILM_DIRECTOR: [MessageHandler(filters.TEXT, add.fourth_step_films)],
            add.FILM_YEAR: [MessageHandler(filters.TEXT, add.fifth_step_films)],
            add.FILM_GENRE: [MessageHandler(filters.TEXT, add.sixth_step_films)],
            add.FILM_DURATION: [MessageHandler(filters.TEXT, add.seventh_step_films)],
            add.FILM_RATING: [CallbackQueryHandler(add.eighth_step_films)],
            add.FILM_LINK: [MessageHandler(filters.TEXT, add.ninth_step_films)],
            add.COVER: [CallbackQueryHandler(add.skip_cover, pattern='^skip_upload$'),
                    MessageHandler(filters.PHOTO, add.penultimate_step)]
        },
        fallbacks=[CommandHandler('cancel', add.cancel)],
        allow_reentry=True
    )
    application.add_handler(add_conversation)

    search_conversation = ConversationHandler(
        entry_points=[CommandHandler('search', search.first_step)],
        states={
            search.TYPE: [CallbackQueryHandler(search.second_step)],
            search.SEARCH_QUERY: [MessageHandler(filters.TEXT, search.third_step)]
        },
        fallbacks=[CommandHandler('cancel', cancel_search)]
    )
    application.add_handler(search_conversation)

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    dispatcher.add_handler(CallbackQueryHandler(handle_pagination, pattern="^search:"))

    application.run_polling()


if __name__ == '__main__':
    main()